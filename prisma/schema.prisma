// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Crop {
  id             Int     @id @default(autoincrement())
  commonName     String  @unique
  scientificName String
  category       String
  cropImage      String? @db.Text // Use Text type to store large base64 string
  fieldId        Int
  field          Field   @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  logs           Log[]
}

model Equipment {
  id        Int       @id @default(autoincrement())
  equipName String    @unique
  equipType EquipType
  status    Status
  staffId   Int?
  fieldId   Int
  staff     Staff?    @relation(fields: [staffId], references: [id], onDelete: SetNull)
  field     Field     @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}

model Field {
  id         Int         @id @default(autoincrement())
  fieldName  String      @unique
  location   String
  extentSize Float
  fieldImage String?     @db.Text // Using @db.Text to allow large strings
  crops      Crop[]
  logs       Log[]
  staff      Staff[]
  equipment  Equipment[]
  Vehicle    Vehicle[]
}

model Log {
  id       Int      @id @default(autoincrement())
  logName  String
  logDate  DateTime
  logImage String? // Stores image path
  fieldId  Int
  cropId   Int
  staffId  Int? // Make staffId optional

  field Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  crop  Crop   @relation(fields: [cropId], references: [id], onDelete: Cascade)
  staff Staff? @relation(fields: [staffId], references: [id], onDelete: SetNull)
}

model Staff {
  id          Int         @id @default(autoincrement())
  name        String
  designation String
  gender      Gender
  joinedDate  DateTime
  dob         DateTime
  address     String
  contact     String      @unique
  email       String      @unique
  fieldId     Int
  field       Field       @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  equipment   Equipment[]
  logs        Log[]
  vehicles    Vehicle[]
}

model Vehicle {
  id                 Int      @id @default(autoincrement())
  licensePlateNumber String   @unique
  category           String
  fuelType           FuelType
  status             Status
  remarks            String?
  fieldId            Int
  staffId            Int? // staffId is optional

  // Relationships
  field Field  @relation(fields: [fieldId], references: [id])
  staff Staff? @relation(fields: [staffId], references: [id]) // staff relationship is optional
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum EquipType {
  TRACTOR
  HARVESTER
  PLOW
  SPRAYER
  OTHER
}
